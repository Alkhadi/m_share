// lib/widgets/add_contact_sheet.dart
// Sheet that allows users to create a new contact from profile data using
// flutter_contacts. Includes a Business/Private toggle.

import 'package:flutter/material.dart';
import 'package:flutter_contacts/flutter_contacts.dart';

import '../models/profile.dart';

class AddContactSheet extends StatefulWidget {
  const AddContactSheet({super.key, required this.profile});

  final Profile profile;

  @override
  State<AddContactSheet> createState() => _AddContactSheetState();
}

class _AddContactSheetState extends State<AddContactSheet> {
  bool isBusiness = true;

  // Local safe helpers (mirror the _Lens approach from ShareService)
  String _fullName(Profile p) {
    try {
      final d = p as dynamic;
      return (d.fullName ??
              d.name ??
              '${d.firstName ?? ''} ${d.lastName ?? ''}')
          .toString()
          .trim();
    } catch (_) {
      return '';
    }
  }

  String _phone(Profile p) {
    try {
      final d = p as dynamic;
      return (d.phoneRaw ?? d.phone ?? d.mobile ?? d.tel ?? '').toString();
    } catch (_) {
      return '';
    }
  }

  String _email(Profile p) {
    try {
      final d = p as dynamic;
      return (d.email ?? '').toString();
    } catch (_) {
      return '';
    }
  }

  String _org(Profile p, bool business) {
    if (!business) return '';
    try {
      final d = p as dynamic;
      return (d.organisation ?? d.organization ?? d.company ?? '').toString();
    } catch (_) {
      return '';
    }
  }

  Future<void> _create() async {
    if (!await FlutterContacts.requestPermission()) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Permission required to save contact.')),
        );
      }
      return;
    }

    final full = _fullName(widget.profile).trim();
    String first = full, last = '';
    if (full.contains(' ')) {
      final parts = full.split(RegExp(r'\s+'));
      first = parts.first;
      last = parts.sublist(1).join(' ');
    }

    final phone = _phone(widget.profile);
    final email = _email(widget.profile);
    final org = _org(widget.profile, isBusiness);

    final contact = Contact()
      ..name = Name(first: first, last: last) // Name.fromFull removed upstream
      ..phones = phone.isNotEmpty ? [Phone(phone)] : []
      ..emails = email.isNotEmpty ? [Email(email)] : []
      ..organizations = org.isNotEmpty ? [Organization(company: org)] : [];

    await contact.insert();
    if (mounted) {
      Navigator.pop(context);
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Contact saved.')),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            SwitchListTile(
              value: isBusiness,
              onChanged: (v) => setState(() => isBusiness = v),
              title: const Text('Business contact'),
              subtitle: const Text('Toggle Business / Private'),
            ),
            const SizedBox(height: 8),
            FilledButton.icon(
              onPressed: _create,
              icon: const Icon(Icons.person_add),
              label: const Text('Create'),
            ),
          ],
        ),
      ),
    );
  }
}
